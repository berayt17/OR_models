from pulp import*
trans = LpProblem("Transshipment_Problem", LpMinimize)

plants = ["Toronto", "Detroit"] 
warehouses = ["Chicago", "Buffalo"] 
customers = ["NYC", "Philly", "StLouis"] 

supply = {"Toronto":800, "Detroit":700} 
demand = {"NYC":450, "Philly":350, "StLouis":300} 

# trans cost from plants to warehouses
tcost1= {"Toronto":{"Chicago":4, "Buffalo":7},
        "Detroit":{"Chicago":5, "Buffalo":7}} 
# trans cost from warehouses to customers
tcost2= {"Chicago":{"NYC":6, "Philly":4, "StLouis":5},
        "Buffalo":{"NYC":2, "Philly":3, "StLouis":4}} 

#decision variables.
#x is from plants to warehouses
#y is from warehouses to customers

#Define the decision variables
x = LpVariable.dicts("qs", (plants, warehouses), lowBound=0) 
y = LpVariable.dicts("qs", (warehouses, customers), lowBound=0)


# Define the objective function
trans += lpSum([tcost1[i][j]*x[i][j] for i in plants for j in warehouses])+  lpSum([tcost2[i][j]*y[i][j] for i in warehouses for j in customers])


# Write the supply constraints:
for i in plants:
    trans+=lpSum(x[i][j] for j in warehouses)<=supply[i]

# Write the demand constraints:
for j in customers:
    trans+=lpSum(y[i][j] for i in warehouses)==demand[j]


# Write the flow-balance constraints:
for w in warehouses:
    trans+=lpSum(x[i][w] for i in plants)== lpSum(y[w][j] for j in customers)

trans.solve(PULP_CBC_CMD(msg=0))


print("Status= ", LpStatus[trans.status])

print("Total Cost= ", value(trans.objective))

for v in trans.variables():
    if v.value()>0:
        print(v.name, " = ", v.value())

print("\n\n LP model:\n ")
print(trans)

